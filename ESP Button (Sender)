// Include these libraries to use ESP-NOW
#include <esp_now.h>
#include <WiFi.h>

// Delcaring a constant integer, Pins connected to their respected GPIO pins
const int buttonPin = 4;
const int ledPin = 23; 
// Declaring the current state of the button
int buttonState = 0;
// Stores the previous state of the button, initializing it to high (meaning button is not pressed if using pull-up resistor)
int lastButtonState = HIGH;

// REPLACE WITH YOUR RECEIVER MAC Address
uint8_t broadcastAddress[] = {0x68, 0x25, 0xdd, 0x48, 0xe2, 0xa0};

// Structure example to send data
// Must match the receiver structure
// Declares a new structure type
// typedef lets us create an alias for the struct
typedef struct struct_message {

//Defines a member variable inside the struct and an array of 4 characters
char command[4];

} struct_message;

// Create a struct_message called myData
struct_message myData;

esp_now_peer_info_t peerInfo;

// callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("\r\nLast Packet Send Status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}
 
void setup() {
  // Init Serial Monitor
  Serial.begin(115200);
  pinMode(buttonPin, INPUT_PULLUP);
  pinMode(ledPin, OUTPUT);
 
  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Once ESPNow is successfully Init, we will register for Send CB to
  // get the status of Trasnmitted packet
  esp_now_register_send_cb(OnDataSent);
  
  // Register peer
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;  
  peerInfo.encrypt = false;
  
  // Add peer        
  if (esp_now_add_peer(&peerInfo) != ESP_OK){
    Serial.println("Failed to add peer");
    return;
  }
}
 
void loop() {
  buttonState = digitalRead(buttonPin);
 
 if (buttonState != lastButtonState){
if (buttonState == LOW){
  strcpy(myData.command, "ON");
  digitalWrite(ledPin, HIGH);

}
else{
  strcpy(myData.command, "OFF");
  digitalWrite(ledPin, LOW);
}
esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *)&myData, sizeof(myData));
if (result == ESP_OK){
  Serial.println("Sent With Success");

}else{
  Serial.println("Error sending the Data");
}
delay(50);
 }
 lastButtonState = buttonState;
}
